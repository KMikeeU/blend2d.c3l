module blend2d;

// --------
// Types
// --------
def BLResult = CUInt;
const BLResult BL_SUCCESS = 0;


def BLObjectDetail = CChar[16];


struct BLArrayCore {
    BLObjectDetail data;
}

// size_t blArrayGetSize(const BLArrayCore* self)
extern fn usz array_get_size(BLArrayCore* array) @extern("blArrayGetSize");

// const void* blArrayGetData(const BLArrayCore* self)
extern fn void* array_get_data(BLArrayCore* array) @extern("blArrayGetData");

// BLResult blArrayInit(BLArrayCore* self, BLObjectType arrayType)
extern fn BLResult array_init(BLArrayCore* array, CUInt arrayType) @extern("blArrayInit");

struct BLSizeI {
  CInt w;
  CInt h;
}

struct BLImageCore {
    BLObjectDetail data;
}
struct BLImageData {
    void* pixelData;
    // intptr_t stride;
    CLongLong stride;
    BLSizeI size;
    CUInt format;
    CUInt flags;
}
distinct BLImageDecoderCore = void;
distinct BLImageEncoderCore = void;

def BLFormat = CUInt;
const BLFormat BL_FORMAT_NONE = 0;
const BLFormat BL_FORMAT_PRGB32 = 1;
const BLFormat BL_FORMAT_XRGB32 = 2;
const BLFormat BL_FORMAT_A8 = 3;

struct BLImageCodecCore {
    BLObjectDetail data;
}

distinct BLPixelConverterCore = void;

/// Geometry
struct BLRect {
    double x;
    double y;
    double w;
    double h;
}

struct BLRectI {
  CInt x;
  CInt y;
  CInt w;
  CInt h;
}

struct BLPointI {
    int x;
    int y;
}

/// rgba
struct BLRgba {
    float r;
    float g;
    float b;
    float a;
}

/// context
struct BLContextCore {
    BLObjectDetail data;
}

distinct BLContextCreateFlags = CUInt;
const BLContextCreateFlags BL_CONTEXT_CREATE_NO_FLAGS = 0;
const BLContextCreateFlags BL_CONTEXT_CREATE_FLAG_DISABLE_JIT = 0x00000001;
const BLContextCreateFlags BL_CONTEXT_CREATE_FLAG_FALLBACK_TO_SYNC = 0x00100000;
const BLContextCreateFlags BL_CONTEXT_CREATE_FLAG_ISOLATED_THREAD_POOL = 0x01000000;
const BLContextCreateFlags BL_CONTEXT_CREATE_FLAG_ISOLATED_JIT_RUNTIME = 0x02000000;
const BLContextCreateFlags BL_CONTEXT_CREATE_FLAG_ISOLATED_JIT_LOGGING = 0x04000000;
const BLContextCreateFlags BL_CONTEXT_CREATE_FLAG_OVERRIDE_CPU_FEATURES = 0x08000000;


struct BLContextCreateInfo {
    BLContextCreateFlags flags;
    CUInt threadCount;
    CUInt cpuFeatures;
    CUInt commandQueueLimit;
    CUInt savedStateLimit;
    BLPointI pixelOrigin;
    CUInt[1] reserved;
}

/// Text API

struct BLFontCore {
    BLObjectDetail data;
}

struct BLFontDataCore {
    BLObjectDetail data;
}

struct BLFontFaceCore {
    BLObjectDetail data;
}

struct BLFontFeatureSettingsCore {
    BLObjectDetail data;
}

struct BLFontManagerCore {
    BLObjectDetail data;
}

struct BLFontVariationSettingsCore {
    BLObjectDetail data;
}

struct BLGlyphBufferCore {
    BLObjectDetail data;
}

struct BLFontQueryProperties {
    CUInt style;
    CUInt weight;
    CUInt stretch;
}

distinct BLTextEncoding = CUInt;
const BL_TEXT_ENCODING_UTF8 = 0;
const BL_TEXT_ENCODING_UTF16 = 1;
const BL_TEXT_ENCODING_UTF32 = 2;
const BL_TEXT_ENCODING_LATIN1 = 3;
const BL_TEXT_ENCODING_WCHAR = 4;
const BL_TEXT_ENCODING_MAX_VALUE = 5;

/// Filesystem API

distinct BLFileReadFlags = CUInt;
const BL_FILE_READ_NO_FLAGS = 0;
const BL_FILE_READ_MMAP_ENABLED = 1;
const BL_FILE_READ_MMAP_AVOID_SMALL = 2;
const BL_FILE_READ_MMAP_NO_FALLBACK = 3;



/// -----------------------------
///       Imaging
/// -----------------------------

module blend2d::image;

// BL_API BLResult BL_CDECL blImageInit(BLImageCore* self) BL_NOEXCEPT_C;
extern fn BLResult init(BLImageCore* image) @extern("blImageInit");

// BL_API BLResult BL_CDECL blImageInitAs(BLImageCore* self, int w, int h, BLFormat format) BL_NOEXCEPT_C;
extern fn BLResult init_as(BLImageCore* image, CInt w, CInt h, BLFormat format) @extern("blImageInitAs");

// BL_API BLResult BL_CDECL blImageDestroy(BLImageCore* self) BL_NOEXCEPT_C;
extern fn BLResult destroy(BLImageCore* image) @extern("blImageDestroy");

// BL_API BLResult BL_CDECL blImageCreate(BLImageCore* self, int w, int h, BLFormat format) BL_NOEXCEPT_C;
extern fn BLResult create(BLImageCore* image, CInt w, CInt h, BLFormat format) @extern("blImageCreate");

// BL_API BLResult BL_CDECL blImageWriteToFile(const BLImageCore* self, const char* fileName, const BLImageCodecCore* codec) BL_NOEXCEPT_C;
extern fn BLResult write_to_file(BLImageCore* image, ZString fileName, BLImageCodecCore* codec) @extern("blImageWriteToFile");

// BLResult blImageGetData(const BLImageCore* self, BLImageData* dataOut)
extern fn BLResult get_data(BLImageCore* image, BLImageData* dataOut) @extern("blImageGetData");


// --------
// BLImageCodec 
// --------

module blend2d::image_codec;

// BLResult blImageCodecInit(BLImageCodecCore* self)
extern fn BLResult init(BLImageCodecCore* codec) @extern("blImageCodecInit");

// BLResult blImageCodecFindByExtension(BLImageCodecCore* self, const char* name, size_t size, const BLArrayCore* codecs)
extern fn BLResult find_by_extension(BLImageCodecCore* codec, ZString name, usz name_size, BLArrayCore* codecs) @extern("blImageCodecFindByExtension");




/// -----------------------------
///       Text API
/// -----------------------------


module blend2d::font;
/// Font
// BLResult blFontInit(BLFontCore* self)
extern fn BLResult init(BLFontCore* font) @extern("blFontInit");

// BLResult blFontCreateFromFace(BLFontCore* self, const BLFontFaceCore* face, float size)
extern fn BLResult create_from_face(BLFontCore* font, BLFontFaceCore* face, float size) @extern("blFontCreateFromFace");

// BLResult blFontCreateFromFaceWithSettings(BLFontCore* self, const BLFontFaceCore* face, float size, const BLFontFeatureSettingsCore* featureSettings, const BLFontVariationSettingsCore* variationSettings)
extern fn BLResult create_from_face_with_settings(BLFontCore* font, BLFontFaceCore* face, float size, BLFontFeatureSettingsCore* featureSettings, BLFontVariationSettingsCore* variationSettings) @extern("blFontCreateFromFaceWithSettings");


module blend2d::font_face;
/// Font face
// BLResult blFontFaceInit(BLFontFaceCore* self)
extern fn BLResult init(BLFontFaceCore* font_face) @extern("blFontFaceInit");

// BLResult blFontFaceCreateFromFile(BLFontFaceCore* self, const char* fileName, BLFileReadFlags readFlags)
extern fn BLResult create_from_file(BLFontFaceCore* font_face, ZString fileName, BLFileReadFlags readFlags) @extern("blFontFaceCreateFromFile");


module blend2d::font_manager;
/// Font Manager
// BLResult blFontManagerInit(BLFontManagerCore* self)
extern fn BLResult init(BLFontManagerCore* font_manager) @extern("blFontManagerInit");

// BLResult blFontManagerCreate(BLFontManagerCore* self)
extern fn BLResult create(BLFontManagerCore* font_manager) @extern("blFontManagerCreate");

// BLResult blFontManagerAddFace(BLFontManagerCore* self, const BLFontFaceCore* face)
extern fn BLResult add_face(BLFontManagerCore* font_manager, BLFontFaceCore* face) @extern("blFontManagerAddFace");

// BLResult blFontManagerQueryFace(const BLFontManagerCore* self, const char* name, size_t nameSize, const BLFontQueryProperties* properties, BLFontFaceCore* out)
extern fn BLResult query_face(BLFontManagerCore* font_manager, ZString name, usz name_size, BLFontQueryProperties* properties, BLFontFaceCore* out) @extern("blFontManagerQueryFace");

// BLResult blFontManagerQueryFacesByFamilyName(const BLFontManagerCore* self, const char* name, size_t nameSize, BLArrayCore* out)
extern fn BLResult query_faces_by_family_name(BLFontManagerCore* font_manager, ZString name, usz name_size, BLArrayCore* out) @extern("blFontManagerQueryFacesByFamilyName");

/// -----------------------------
///       Rendering Context
/// -----------------------------
module blend2d::context;

// BLResult blContextInit(BLContextCore* self)
extern fn BLResult init(BLContextCore* context) @extern("blContextInit");

// BLResult blContextDestroy(BLContextCore* self)
extern fn BLResult destroy(BLContextCore* context) @extern("blContextDestroy");

// BLResult blContextBegin(BLContextCore* self, BLImageCore* image, const BLContextCreateInfo* cci)
extern fn BLResult begin(BLContextCore* context, BLImageCore* image, BLContextCreateInfo* cci) @extern("blContextBegin");

// BLResult blContextEnd(BLContextCore* self)
extern fn BLResult end(BLContextCore* context) @extern("blContextEnd");

// BLResult blContextFillAll(BLContextCore* self)
extern fn BLResult fill_all(BLContextCore* context) @extern("blContextFillAll");

// BLResult blContextFillRectI(BLContextCore* self, const BLRectI* rect)
extern fn BLResult fill_rect_i(BLContextCore* context, BLRectI* rect) @extern("blContextFillRectI");

// BLResult blContextSetFillStyleRgba(BLContextCore* self, const BLRgba* rgba)
extern fn BLResult set_fill_style_rgba(BLContextCore* context, BLRgba* rgba) @extern("blContextSetFillStyleRgba");


// BLResult blContextFillUtf8TextI(BLContextCore* self, const BLPointI* origin, const BLFontCore* font, const char* text, size_t size)
extern fn BLResult fill_utf8_text_i(BLContextCore* context, BLPointI* origin, BLFontCore* font, ZString text, usz size) @extern("blContextFillUtf8TextI");
